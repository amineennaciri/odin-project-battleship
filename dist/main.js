/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/classObj.js":
/*!*************************!*\
  !*** ./src/classObj.js ***!
  \*************************/
/***/ ((module) => {

eval("class ship{\r\n    constructor(length,hitNumber=0){\r\n        this.length = length;\r\n        this.hitNumber = hitNumber;\r\n    }\r\n    hit (){\r\n        this.hitNumber++;\r\n        //return this.hitNumber;\r\n    }\r\n    isSunk(){\r\n        if(this.length === this.hitNumber){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}\r\nclass gameboard{\r\n    constructor(ship,coordinates){\r\n        this.ship = ship;\r\n        this.coordinates = coordinates;\r\n    }\r\n    placeShip(){\r\n        console.log(this.coordinates);\r\n        console.log(this.ship);\r\n    }\r\n    receiveAttack(receiveCoord){\r\n        for(let i=0;i<=this.coordinates.length-1;i++){\r\n            if(this.coordinates[i].includes(receiveCoord)){\r\n                this.ship[i].hit();\r\n                document.getElementById(`${receiveCoord}`).style.backgroundColor = '#ef476f';//color for a hit\r\n            }else{\r\n                document.getElementById(`${receiveCoord}`).style.backgroundColor = '#579f9b';//color for a miss\r\n            }\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nclass addEventList{\r\n    constructor(target,callback){\r\n        this.target = target;\r\n        this.callback = callback;\r\n    }\r\n    addEvent(){\r\n        for(let i = 0; i<= this.target.length-1;i++){\r\n            this.target[i].addEventListener('click',this.callback);\r\n        }\r\n    }\r\n}\r\n// Player 1 ships and gameboard\r\nconst carrierShip = new ship(5);\r\nconst battleshipShip = new ship(4);\r\nconst cruiserShip = new ship(3);\r\nconst submarineShip = new ship(3);\r\nconst destroyerShip = new ship(2);\r\nlet playerGameBoard = undefined;\r\n// AI ships and gameboard\r\n// ...\r\n\r\nmodule.exports = { ship, gameboard, addEventList, carrierShip, battleshipShip,cruiserShip, submarineShip, destroyerShip, playerGameBoard};\r\n\r\n// code snipet that will help me further down the line for computer AI playMaking\r\n/*\r\n            function getComputerChoice(){\r\n            let randomNumber = Math.random()\r\n            if(randomNumber<=0.33){\r\n                return 'Rock'\r\n            }else if(randomNumber<=0.66){\r\n                return 'Paper'\r\n            }else{\r\n                return 'Scissors'\r\n            }\r\n        }\r\n*/\r\n\r\n\r\n//import { ship, gameboard } from './classObj.js';\r\n//const game1 = new ship(5);\r\n//console.log(game1);\n\n//# sourceURL=webpack://odin-project-battleship/./src/classObj.js?");

/***/ }),

/***/ "./src/general.js":
/*!************************!*\
  !*** ./src/general.js ***!
  \************************/
/***/ ((module) => {

eval("// this object will confirm if the coordinate of a ship is correct or not based on type and axe of the ship.\r\nconst shipCriteria = {\r\n    CarrierH : [0,1,2,3,4,5,10,11,12,13,14,15,20,21,22,23,24,25,30,31,32,33,34,35,40,41,42,43,44,45,50,51,52,53,54,55,60,61,62,63,64,65,70,71,72,73,74,75,80,81,82,83,84,85,90,91,92,93,94,95],\r\n    BattleshipH : [0,1,2,3,4,5,6,10,11,12,13,14,15,16,20,21,22,23,24,25,26,30,31,32,33,34,35,36,40,41,42,43,44,45,46,50,51,52,53,54,55,56,60,61,62,63,64,65,66,70,71,72,73,74,75,76,80,81,82,83,84,85,86,90,91,92,93,94,95,96],\r\n    CruiserH : [0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,27,30,31,32,33,34,35,36,37,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,80,81,82,83,84,85,86,87,90,91,92,93,94,95,96,97],\r\n    SubmarineH : [0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,27,30,31,32,33,34,35,36,37,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,80,81,82,83,84,85,86,87,90,91,92,93,94,95,96,97],\r\n    DestroyerH : [0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98],\r\n    CarrierV : [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],\r\n    BattleshipV : [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],\r\n    CruiserV : [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],\r\n    SubmarineV : [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],\r\n    DestroyerV : [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],\r\n    checkCriteria : function(coordId, shipType, shipAxe){\r\n        // coordId = PlayerCoord20 or AICoord20\r\n        // we need to extract the next 20\r\n        coordId = +coordId.split('d')[1]; // we extract the number.\r\n        if(shipAxe === 'Horizontal'){\r\n            if(shipType === 'Carrier'){\r\n                return shipCriteria.CarrierH.includes(coordId)? true : alert('please choose another spot');\r\n            }else if(shipType === 'Battleship'){\r\n                return shipCriteria.BattleshipH.includes(coordId)? true : alert('please choose another spot');\r\n            }else if(shipType === 'Cruiser'){\r\n                return shipCriteria.CruiserH.includes(coordId)? true : alert('please choose another spot');\r\n            }else if(shipType === 'Submarine'){\r\n                return shipCriteria.SubmarineH.includes(coordId)? true : alert('please choose another spot');\r\n            }else if(shipType === 'Destroyer'){\r\n                return shipCriteria.DestroyerH.includes(coordId)? true : alert('please choose another spot');\r\n            }\r\n        }else if(shipAxe === 'Vertical'){\r\n            if(shipType === 'Carrier'){\r\n                return shipCriteria.CarrierV.includes(coordId)? true : alert('please choose another spot');\r\n            }else if(shipType === 'Battleship'){\r\n                return shipCriteria.BattleshipV.includes(coordId)? true : alert('please choose another spot');\r\n            }else if(shipType === 'Cruiser'){\r\n                return shipCriteria.CruiserV.includes(coordId)? true : alert('please choose another spot');\r\n            }else if(shipType === 'Submarine'){\r\n                return shipCriteria.SubmarineV.includes(coordId)? true : alert('please choose another spot');\r\n            }else if(shipType === 'Destroyer'){\r\n                return shipCriteria.DestroyerV.includes(coordId)? true : alert('please choose another spot');\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// this object will place the ship\r\nconst shipInsertion = {\r\n//headerObj.selectLength = shipLength\r\n// headerObj.shipAxis = shipAxe\r\n// headerObj.shipType = shipType\r\n// placeShip.coordArray = coordArray\r\n// targetId = e.srcElement.id\r\ngetInserted : function(vertArray, targetClass, targetPos, shipLength, shipAxis, shipType,targetId){\r\n            let coordArray = [];\r\n            if(shipLength!=0){\r\n                //select the number-1 to the right\r\n                for(let i = 0;i<=shipLength-1;i++){\r\n                    if(shipAxis === 'Horizontal'){\r\n                        targetPos.style.backgroundColor = '#06D6A0';\r\n                        targetPos.setAttribute('class',targetClass+' '+shipType);\r\n                        //console.log(targetPos.id);\r\n                        coordArray.push(targetPos.id);\r\n                        targetPos = targetPos.nextSibling;\r\n                    }else if(shipAxis === 'Vertical'){\r\n                        //console.log('im here')\r\n                        vertArray = `${targetId}`.split('d');\r\n                        //console.log(vertArray);\r\n                        vertArray[1] = +vertArray[1] +(i*10);\r\n                        vertArray[0] += 'd';\r\n                        vertArray = vertArray.join('');\r\n                        //console.log(vertArray);\r\n                        document.querySelector(`#${vertArray}`).style.backgroundColor = '#06D6A0';\r\n                        document.querySelector(`#${vertArray}`).setAttribute('class',targetClass+' '+shipType);\r\n                        //console.log(document.querySelector(`#${vertArray}`).id);\r\n                        coordArray.push(document.querySelector(`#${vertArray}`).id);\r\n                    }\r\n                }\r\n            }\r\n            return coordArray;\r\n        }\r\n}\r\n\r\n\r\nmodule.exports = {shipCriteria,shipInsertion};\n\n//# sourceURL=webpack://odin-project-battleship/./src/general.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { ship, gameboard, addEventList, carrierShip,battleshipShip, cruiserShip, submarineShip, destroyerShip} = __webpack_require__(/*! ./classObj */ \"./src/classObj.js\");\r\nlet {playerGameBoard} = __webpack_require__(/*! ./classObj */ \"./src/classObj.js\");\r\nconst {shipCriteria,shipInsertion} = __webpack_require__(/*! ./general */ \"./src/general.js\");\r\nconst {AIPlayer} = __webpack_require__(/*! ./playerAI */ \"./src/playerAI.js\");\r\n// Game Dashboard Init\r\n/* console.log(game1.score); */\r\n\r\n\r\nconst boardInit = {\r\n    i: 0,//index used in the increment function.\r\n    increment: function(){\r\n        while(this.i<100){\r\n            const targetPlayer = document.querySelector('.playerBoard');\r\n            const targetAI = document.querySelector('.AIBoard');\r\n            const btnPlayer = document.createElement('div');\r\n            const btnAI = document.createElement('div');\r\n            btnPlayer.setAttribute('class',`targetPlayer`);\r\n            btnAI.setAttribute('class',`targetAI`);\r\n            btnPlayer.setAttribute('id',`playerCoord${this.i}`);\r\n            btnAI.setAttribute('id',`AICoord${this.i}`);\r\n            targetPlayer.appendChild(btnPlayer);\r\n            targetAI.appendChild(btnAI);\r\n            //add event listener to targetPlayer\r\n            document.querySelector(`#playerCoord${this.i}`).addEventListener('click',placeShip.targetPlayerEvent);\r\n            boardInit.i++;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// headerObject\r\nconst headerObj = {\r\n    headerBtn : document.querySelectorAll('.headBtn'),\r\n    selectLength : 0, // used to determine which ship\r\n    shipType : undefined, // carrier or else...\r\n    shipAxis : 'Horizontal', // user for positioning\r\n    headerBtnAddEvent : function(){\r\n        new addEventList(this.headerBtn,this.headerBtnEvent).addEvent();\r\n    },\r\n    headerBtnEvent : function(e){\r\n        //console.log(e.srcElement);\r\n        //console.log(e.srcElement.innerText);\r\n        const headBtnType = e.srcElement.innerText;\r\n        if(headBtnType === 'Vertical'){\r\n            e.srcElement.innerText = 'Horizontal';\r\n            headerObj.shipAxis = 'Vertical';\r\n        }else if(headBtnType === 'Carrier'){\r\n            headerObj.selectLength = 5;\r\n            headerObj.shipType = 'Carrier';\r\n        }else if(headBtnType === 'Battleship'){\r\n            headerObj.selectLength = 4;\r\n            headerObj.shipType = 'Battleship';\r\n        }else if(headBtnType === 'Cruiser'){\r\n            headerObj.selectLength = 3;\r\n            headerObj.shipType = 'Cruiser';\r\n        }else if(headBtnType === 'Submarine'){\r\n            headerObj.selectLength = 3;\r\n            headerObj.shipType = 'Submarine';\r\n        }else if(headBtnType === 'Destroyer'){\r\n            headerObj.selectLength = 2;\r\n            headerObj.shipType = 'Destroyer';\r\n        }else if(headBtnType === 'Horizontal'){\r\n            e.srcElement.innerText = 'Vertical';\r\n            headerObj.shipAxis = 'Horizontal';\r\n        }else if(headBtnType === 'Start the game'){\r\n            //empty needs to be filled\r\n            // below are just drills console.log\r\n            if(true/*playerGameBoard!=undefined*/){\r\n                //this condition is necessary to make sure that the player has placed all his ships on the gameboard\r\n                /* console.log(placeShip.shipsArray);\r\n                console.log(placeShip.shipsCoordsArray);\r\n                console.log(playerGameBoard);\r\n                playerGameBoard.receiveAttack('playerCoord41');\r\n                playerGameBoard.receiveAttack('playerCoord40');\r\n                console.log(playerGameBoard);\r\n                console.log(playerGameBoard.ship[4].isSunk()); */\r\n                console.log(playerGameBoard);\r\n\r\n                //run\r\n                //placeAIShip.createAIGameboard();\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// this is the Object that places the ships on the playerBoard\r\nconst placeShip = {\r\n    coordArray : [],// this variable will be passed into the shipsCoordsArray\r\n    shipsArray : [], // this is an array for ship types\r\n    shipsCoordsArray : [], // this variable will be passed into the gameboard class \r\n    targetPlayerEvent : function(e){\r\n        placeShip.coordArray = []; // init each time to avoid passing other ships coordinates.\r\n        if(document.querySelectorAll(`.${headerObj.shipType}`).length!=0){\r\n            //exit the function if a ship is already positioned, in order to avoid duplicates\r\n            return;\r\n        }\r\n        const targetId = e.srcElement.id;\r\n        // check if the coordinate chosen is correct\r\n        if(!(shipCriteria.checkCriteria(targetId,headerObj.shipType,headerObj.shipAxis))){\r\n            //exit the function if the coordinate is incorrect\r\n            return;\r\n        }\r\n        let vertArray = undefined; // used when shipAxis = vertical\r\n        const targetClass = e.srcElement.className;\r\n        const targetPos = document.querySelector(`#${targetId}`);\r\n        placeShip.coordArray = shipInsertion.getInserted(vertArray, targetClass, targetPos, headerObj.selectLength, headerObj.shipAxis, headerObj.shipType,targetId);\r\n        // calling the createGameboard function\r\n        placeShip.createGameboard(placeShip.coordArray,placeShip.shipsCoordsArray,placeShip.shipsArray,headerObj.shipType);\r\n    },\r\n    createGameboard : function(coordArray,shipsCoordsArray,shipsArray,shipType){\r\n        shipsCoordsArray.push(coordArray);\r\n        if(shipType==='Carrier'){\r\n            shipsArray.push(carrierShip);\r\n        }else if(shipType==='Battleship'){\r\n            shipsArray.push(battleshipShip);    \r\n        }else if(shipType==='Cruiser'){\r\n            shipsArray.push(cruiserShip);\r\n        }else if(shipType==='Submarine'){\r\n            shipsArray.push(submarineShip);\r\n        }else if(shipType==='Destroyer'){\r\n            shipsArray.push(destroyerShip);\r\n        }\r\n        \r\n\r\n        // create an object from gameboard class\r\n        if(shipsArray.length === 5 && shipsCoordsArray.length === 5){\r\n            playerGameBoard = new gameboard(shipsArray,shipsCoordsArray);\r\n        }\r\n    }\r\n}\r\n// this is the Object that places the ships on the AIBoard\r\nconst placeAIShip = {\r\n    createAIGameboard : function(){\r\n        // first determine if the \r\n        console.log('hello world');\r\n        //testing AIPLAYER\r\n        AIPlayer.shipAxisAI()\r\n        if(AIPlayer.getShipAxisAI==='Horizontal'){\r\n            AIPlayer.studyAIBoard(AIPlayer.CarrierH);\r\n            console.log(AIPlayer.getShipAxisAI);\r\n            console.log(AIPlayer.fixCoordinateAIShip());\r\n        }else if(AIPlayer.getShipAxisAI==='Vertical'){\r\n            AIPlayer.studyAIBoard(AIPlayer.CarrierV);\r\n            console.log(AIPlayer.getShipAxisAI);\r\n            console.log(AIPlayer.fixCoordinateAIShip());\r\n        }\r\n        //console.log(AIPlayer);\r\n    },\r\n    targetAIBoard : function(shipAxis,shipCoordinate,shipType){\r\n        if(shipAxis==='Vertical'){\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n// EXECUTION\r\nboardInit.increment(); // init the both player and AI dashboard\r\nheaderObj.headerBtnAddEvent(); // creates event listeners for the Header buttons.\n\n//# sourceURL=webpack://odin-project-battleship/./src/index.js?");

/***/ }),

/***/ "./src/playerAI.js":
/*!*************************!*\
  !*** ./src/playerAI.js ***!
  \*************************/
/***/ ((module) => {

eval("const AIPlayer = {\r\n    getShipAxisAI : undefined,\r\n    getCoordinateAIShip: undefined,\r\n    getCoordinateNum : undefined,\r\nInitFunc: function(){\r\n    AIPlayer.getShipAxisAI = undefined;\r\n    AIPlayer.getCoordinateAIShip= undefined;\r\n    AIPlayer.getCoordinateNum = undefined;\r\n},\r\ngetRandomNum : function(){\r\n    return Math.floor(Math.random()*100);// 0<=x<1\r\n},\r\nshipAxisAI : function(){\r\n    const value = AIPlayer.getRandomNum();\r\n    return value <=50 ? AIPlayer.getShipAxisAI = 'Horizontal' : AIPlayer.getShipAxisAI ='Vertical';\r\n},\r\nstudyAIBoard : function(shipArray){\r\n    // determine if the ship will be Vertical or Horizontal\r\n    AIPlayer.getCoordinateNum = AIPlayer.getRandomNum();\r\n    if(shipArray.includes(AIPlayer.getCoordinateNum)){\r\n        return AIPlayer.getCoordinateAIShip = AIPlayer.getCoordinateNum;\r\n    }else{\r\n        AIPlayer.studyAIBoard(shipArray); // run again.\r\n    }\r\n},\r\nfixCoordinateAIShip: function(){\r\n    return AIPlayer.getCoordinateAIShip = `AICoord${AIPlayer.getCoordinateAIShip}`;\r\n}\r\n}\r\n\r\n\r\nmodule.exports = {AIPlayer};\n\n//# sourceURL=webpack://odin-project-battleship/./src/playerAI.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;